Anatomy of HashMap

HashMap is a data structure used in Java.
HashMap extends AbstractMap and implements Map interface.
HashMap contains only unique elements.
HashMap is similar to HashTable, except for..
	1) HashMap methods are NOT synchronized.
	2) HashMap allows null key and null values (may have one null key and multiple null values)
HashMap contains entries(key and value) whereas a HashSet contains only values
HashMap is not an ordered collection, which means that it does not return the keys and values in the same order they have been inserted into.
HashMap does not do any sorting to the stored keys and Values.
java.util.HashMap or its super classes needs to be imported in order to use HashMap class and methods.

Since HashMap is not Synchronized and if multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally (adding or deleting one or more mappings or changing the value associate with a key are called structural modification), it must be synchronized externally.
	In order to synchronize HashMap at creation time, to prevent accidental unsynchronized access to map.
		Map m = Collections.synchronizedMap(new HashMap(…));
	The iterators returned by all of this class's "collection view methods" are fail-fast: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will throw a ConcurrentModificationException.

Performance:
	HashMap provides constant time performance for the basic operations (get and put), assuming the hash function spreads the elements properly among the buckets.
	Iteration over collection views requires time proportional to the “capacity” of the HashMap instance (the number of buckets) plus its size (the number of key-value mappings). So, if the initial size of the HashMap is set to a large number, the iteration would be more. Hence it is very important NOT to set the initial capacity too high (or the load factor too low), if the iteration performance is important.

Capacity and Load Factor:

A HashMap has 2 parameters that affect its performance:
		Initial Capacity: The capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time hash table is created.
		Load Factor: Its a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash 				      table exceeds the product of the load factor and the current capacity, the has table is rehashed (that is the internal data structures are rebuilt) so 				      that the hash table has approximately twice the number of buckets.

	The default load factor is 0.75. It offers a good tradeoff between time and space costs. Higher values decreases the space overhead, but increases the lookup cost (get and put).
	The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the  number of rehash operations. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will occur.
	If many mappings are to be stored in a HashMap instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table.


HashMap is declared as HaspMap<String, Integer>  map = new HashMap<>();

HashMap has a table (of type Entry) of Array of length 16 (0 till 15).
	The table is of type Entry.
	Entry is a static inner class present inside a HashMap class.
	Entry class is a implementation of Single LinkedList.

The internal data structure of a HashMap to store data is a Array, where each element is a LinkedList (of type entry).

Here is how the Entry class looks like

static class Entry<K,V> implements Map.Entry<K,V> {
	final K key;
	V value;
	Entry<K,V> next;
	final int hash;

	/**
	* Creates new entry.
	*/
	Entry(int h, K k, V v, Entry<K,V> n){
		value = v;
		next = n;
		key = k;
		hash = h;
	}
}

hash value stores the bucket number. The bucket number is nothing but index of the table array.